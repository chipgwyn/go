#!/usr/bin/env python3

import os
import sys
import datetime
from subprocess import call
from pathlib import Path
from distutils.spawn import find_executable


#######################################
# User configurable stuff, shouldn't
# NEED to modify anything here, but
# here it is if you want
#######################################
SSH_EXEC = find_executable('ssh')
TEE_EXEC = find_executable('tee')
SCRIPT_EXEC = find_executable('script')
LOGGING_DIR = Path(os.getenv('HOME'), 'daily_log')


def run_command(cmd: list) -> None:
    """
    Function: runCommand(cmd):
    Descr: given a list object of commands and args, pass it to the OS to be
            run.  Once the command returns, the script will exit.
    Args: cmd = list of commands and args.  Given a list: [ssh, remote_host],
            the command "ssh remote_host" will be executed
    """
    call(cmd)
    sys.exit(0)


def date_path() -> datetime:
    """
    Function: date_path()
    Descr: returns a string to be used for a directory path YYYY/MM/DD, 0 padded
    Args: none
    """
    return datetime.date.today().strftime('%Y/%m/%d')


def time_date_string():
    """
    Function: time_date_string()
    Descr: returns a string including the date along with the time: YYMMDD-HH.MM.SS.MS
    Args: none
    """
    return datetime.datetime.now().strftime('%Y%m%d-%H.%M.%S.%f')


def log_method() -> str:
    """
    Function: log_method():
    Descr: returns a best guess at how to log the ssh session.  Uses the linux-util 'script' if
            the os is linux or darwin, otherwise uses the 'tee' command.
    Args: none
    """
    log_methods = {'linux': 'new',
                   'linux2': 'new',
                   'darwin': 'old',
                   }

    ostype = sys.platform
    try:
        return log_methods[ostype]
    except KeyError:
        print("ERROR: No 'script' command available, exiting...")
        sys.exit(1)


def gen_command(script_exec: str, conn_exec: str, logmethod: str, logfile: str, host: str) -> list:
    """
    Function gen_command():
    Descr:	returns a list of commands to be executed to connect to the host and
            implements the correct logging method
    Args:	conn_exec:	the command to execute a connection to the remote host.
                        Normally, this is just 'ssh', could be 'telnet'
            logmethod:	the method used for logging the connection output, at the moment,
                        just supports the different versions of the 'script' command
            logfile:	the filename to log the output to
            host:		the host to connect to
    Returns:	list of arguments to connect to the remote host and log the output
    """
    if 'old' in logmethod:
        return [script_exec, logfile, conn_exec, host]

    if 'new' in logmethod:
        return [script_exec, '-c', conn_exec + '  ' + host, logfile]


def print_help() -> None:
    print("Gimme somewhere to go!")
    sys.exit(1)


def transform_host(hostname: str) -> str:
    """
    Function: transform_host():
    Descr:  returns a new hostname after performing some transformation on it.  This is
            normally used to create a 'shortcut' for hostnames that are rather long.
            Say, use 'nms.site' as a shortcut for 'mysuperlongnmshost.site'
    Args: hostname: this is the hostname received as an argument on the command line
    Returns:  newhost, a string containing the transformed hostname
    """

    if 'nms.' in hostname:
        hostname = hostname.replace('nms.', 'nmsspare.')

    return hostname


#######################################
# MAIN!!
#######################################
def main() -> None:

    remote_host = str()

    if len(sys.argv) < 2:
        print_help()
    else:
        remote_host = sys.argv[1] or print_help()

    remote_host = transform_host(remote_host)

    current_log_dir: Path = Path(LOGGING_DIR, date_path())
    current_log_file: Path = Path(remote_host + '.' + time_date_string())
    current_log_file_path: Path = Path(current_log_dir, current_log_file)
    current_log_dir.mkdir(parents=True, exist_ok=True)

    print("-Connecting to: {0}".format(remote_host))
    print("-Logging to: {0}".format(current_log_file_path))

    cmd: list = gen_command(script_exec=SCRIPT_EXEC, conn_exec=SSH_EXEC, logmethod=log_method(),
                            logfile=current_log_file_path.as_posix(), host=remote_host)
    print(cmd)
    run_command(cmd)


if __name__ == '__main__':
    main()
